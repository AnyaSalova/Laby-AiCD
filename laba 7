'''
Лабораторная работа №7
Требуется для своего варианта второй части л.р. №6 (усложненной программы) написать объектно-ориентированную реализацию.
В программе должны быть реализованы минимум один класс, три атрибута, два метода.

Вариант 24. У няни неограниченное количество  фруктов К разных названий (ф1,…фК).
Сформировать (вывести) все возможные варианты меню полдника (1 фрукт) для ребенка на неделю.
'''

import time
import itertools
import tkinter as tk
from tkinter import scrolledtext

'''условие для усложнения'''
def is_valid_schedule(schedule):
    for i in range(1, len(schedule)):
        if schedule[i] == schedule[i-1]:
            return False
    return True

'''усложненный алгоритмический способ'''
def complex_generate_all_menus_algo(fruits, days):
    def is_valid_schedule(path, fruit):
        return not path or path[-1] != fruit

    def backtrack(path, depth):
        if depth == days:
            all_menus.append(path)
            return
        for fruit in fruits:
            if is_valid_schedule(path, fruit):
                backtrack(path + [fruit], depth + 1)

    all_menus = []
    backtrack([], 0)
    return all_menus

'''усложненная функция с использованием функций питона'''
def complex_generate_all_menus_builtin(fruits, days):
    def is_valid_menu(menu):
        return all(menu[i] != menu[i + 1] for i in range(len(menu) - 1))

    all_combinations = itertools.product(fruits, repeat=days)
    valid_menus = filter(is_valid_menu, all_combinations)
    return list(valid_menus)

def target_function(schedule):
    return len(set(schedule))

'''поиск оптимального меню'''
def find_optimal_menu(fruits, days):
    valid_menus = [menu for menu in itertools.product(fruits, repeat=days) if is_valid_schedule(menu)]
    optimal_menu = max(valid_menus, key=target_function)
    return optimal_menu

'''запуск программы'''
def run_program():
    num_fruits = entry_num_fruits.get()
    if not num_fruits.isdigit() or int(num_fruits) <= 1:
        text_result.delete(1.0, tk.END)
        text_result.insert(tk.END, "Из данного количества фруктов невозможно составить меню")
        return

    num_fruits = int(num_fruits)
    fruits = [f"f{i+1}" for i in range(num_fruits)]
    days = 7

    result_text = ""

    complex_start_time_algo = time.time()
    complex_all_menus_algo = complex_generate_all_menus_algo(fruits, days)
    complex_end_time_algo = time.time()

    result_text += "Алгоритмический подход усложненной задачи:\n"
    for schedule in complex_all_menus_algo:
        result_text += f"{schedule}\n"
    result_text += f"Время выполнения усложненной задачи(алгоритмический подход): {complex_end_time_algo - complex_start_time_algo} секунд\n\n"

    complex_start_time_builtin = time.time()
    complex_all_menus_builtin = complex_generate_all_menus_builtin(fruits, days)
    complex_end_time_builtin = time.time()

    result_text += "Подход с использованием встроенных функций для усложненной задачи:\n"
    for schedule in complex_all_menus_builtin:
        result_text += f"{schedule}\n"
    result_text += f"Время выполнения усложненной задачи (встроенные функции): {complex_end_time_builtin - complex_start_time_builtin} секунд\n"
    result_text += f"Разность по времени выполнения: {abs((complex_end_time_builtin - complex_start_time_builtin) - (complex_end_time_algo - complex_start_time_algo))} секунд\n\n"

    start_time_optimal = time.time()
    optimal_menu = find_optimal_menu(fruits, days)
    end_time_optimal = time.time()

    result_text += "Оптимальное меню:\n"
    result_text += f"{optimal_menu}\n"
    result_text += f"Время выполнения (поиск оптимального меню): {end_time_optimal - start_time_optimal} секунд\n"

    text_result.delete(1.0, tk.END)
    text_result.insert(tk.END, result_text)

app = tk.Tk()
app.title("Меню Фруктов")

frame_input = tk.Frame(app)
frame_input.pack(pady=10)

tk.Label(frame_input, text="Введите количество различных фруктов:").grid(row=0, column=0, padx=5, pady=5)
entry_num_fruits = tk.Entry(frame_input)
entry_num_fruits.grid(row=0, column=1, padx=5, pady=5)

frame_buttons = tk.Frame(app)
frame_buttons.pack(pady=10)

tk.Button(frame_buttons, text="Запустить", command=run_program).grid(row=0, column=0, padx=5, pady=5)

frame_result = tk.Frame(app)
frame_result.pack(pady=10)

tk.Label(frame_result, text="Результаты:").pack()
text_result = scrolledtext.ScrolledText(frame_result, width=80, height=20)
text_result.pack()

app.mainloop()
