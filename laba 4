'''С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из
 4-х равных по размерам подматриц, B,C,D,E заполняется случайным образом целыми
 числами в интервале [-10,10]. Для отладки использовать не случайное заполнение,
 а целенаправленное. Вид матрицы А:
В	С
D	Е

Для простоты все индексы в подматрицах относительные.
По сформированной матрице F (или ее частям) необходимо вывести не менее 3 разных графиков.
Программа должна использовать функции библиотек numpy  и mathplotlib

24.	Формируется матрица F следующим образом: скопировать в нее А и  если в Е количество чисел,
больших К в четных столбцах меньше, чем произведение чисел в нечетных строках , то поменять
местами В и С симметрично, иначе С и В поменять местами несимметрично. При этом матрица А
не меняется. После чего если определитель матрицы А больше суммы диагональных элементов
 матрицы F, то вычисляется выражение: A-1*AT – K * FТ, иначе вычисляется выражение (A +GТ-F-1)*K,
где G-нижняя треугольная матрица, полученная из А. Выводятся по мере формирования А, F и все
матричные операции последовательно.
'''

import numpy as np
import matplotlib.pyplot as plt

# Ввод K и N
K = int(input("Введите K: "))
N = int(input("Введите N: "))

# Создаем квадратную матрицу A размером N x N
A = np.random.randint(-10, 11, (N, N))

# Для отладки можно использовать целенаправленное заполнение
# A = np.array([...])

# Вывод матрицы A
print("Матрица A:")
print(A)

# Разбиваем A на подматрицы B, C, D, E
mid = N // 2
B = A[:mid, :mid]
C = A[:mid, mid:]
D = A[mid:, :mid]
E = A[mid:, mid:]

# Формируем матрицу F
F = A.copy()
count_greater_K = np.sum(E[:, 1::2] > K)  # Числа больше K в четных столбцах
product_odd_rows = np.prod(E[::2, :])      # Произведение чисел в нечетных строках

# Условие для изменения подматриц
if count_greater_K < product_odd_rows:
    F[:mid, :mid], F[:mid, mid:] = F[:mid, mid:], F[:mid, :mid].copy()  # Меняем B и C симметрично
else:
    F[:mid, :mid], F[:mid, mid:] = F[mid:, mid:], F[:mid, :mid]         # Меняем C и B несимметрично

# Вывод матрицы F
print("Матрица F:")
print(F)

# Вычисляем выражение в зависимости от условия
if np.linalg.det(A) > np.trace(F):
    result = np.linalg.inv(A).dot(A.T) - K * F.T
else:
    G = np.tril(A)  # Нижняя треугольная матрица из A
    result = (A + G.T - np.linalg.inv(F)) * K

# Вывод результата
print("Результат вычислений:")
print(result)

# Функция для отображения матрицы в виде графика
def plot_matrix(matrix, title):
    plt.matshow(matrix)
    plt.title(title)
    plt.colorbar()
    plt.show()

# Выводим графики
plot_matrix(A, "Матрица A")
plot_matrix(F, "Матрица F")
plot_matrix(result, "Результат вычислений")
